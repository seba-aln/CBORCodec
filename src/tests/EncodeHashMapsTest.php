<?php

declare(strict_types=1);

namespace PubNub\CborCodec\Tests;

use PHPUnit\Framework\TestCase;
use PubNub\CborCodec\CBOR;

class EncodeHashMapsTest extends TestCase
{
    public function hashMaps()
    {
        return [
            [ 'A1665075624E75626652756C657A21', ['PubNub' => 'Rulez!'] ],
            [
                'A1665075624E7562A46C64656C697665727954696D65FB3FD0000000000000'
                . '624841F56A7573657253746174757364F09F98830183010203',
                [ 'PubNub' => [ 'deliveryTime' => 0.25, 'HA' => true, 'userStatus' => 'ðŸ˜ƒ', 1 => [ 1, 2, 3 ] ] ],
            ],

            [
                'B86462613063612030626131636120316261326361203262613363612033626134636120346261356361203562613663612036'
                . '6261376361203762613863612038626139636120396262306362203062623163622031626232636220326262336362203362'
                . '6234636220346262356362203562623663622036626237636220376262386362203862623963622039626330636320306263'
                . '3163632031626332636320326263336363203362633463632034626335636320356263366363203662633763632037626338'
                . '6363203862633963632039626430636420306264316364203162643263642032626433636420336264346364203462643563'
                . '6420356264366364203662643763642037626438636420386264396364203962653063652030626531636520316265326365'
                . '2032626533636520336265346365203462653563652035626536636520366265376365203762653863652038626539636520'
                . '3962663063662030626631636620316266326366203262663363662033626634636620346266356366203562663663662036'
                . '6266376366203762663863662038626639636620396267306367203062673163672031626732636720326267336367203362'
                . '6734636720346267356367203562673663672036626737636720376267386367203862673963672039626830636820306268'
                . '3163682031626832636820326268336368203362683463682034626835636820356268366368203662683763682037626838'
                . '6368203862683963682039626930636920306269316369203162693263692032626933636920336269346369203462693563'
                . '69203562693663692036626937636920376269386369203862693963692039626A30636A2030626A31636A2031626A32636A'
                . '2032626A33636A2033626A34636A2034626A35636A2035626A36636A2036626A37636A2037626A38636A2038626A39636A20'
                . '39',
                [
                    'a0' => 'a 0','a1' => 'a 1','a2' => 'a 2','a3' => 'a 3','a4' => 'a 4','a5' => 'a 5','a6' => 'a 6',
                    'a7' => 'a 7','a8' => 'a 8','a9' => 'a 9','b0' => 'b 0','b1' => 'b 1','b2' => 'b 2','b3' => 'b 3',
                    'b4' => 'b 4','b5' => 'b 5','b6' => 'b 6','b7' => 'b 7','b8' => 'b 8','b9' => 'b 9','c0' => 'c 0',
                    'c1' => 'c 1','c2' => 'c 2','c3' => 'c 3','c4' => 'c 4','c5' => 'c 5','c6' => 'c 6','c7' => 'c 7',
                    'c8' => 'c 8','c9' => 'c 9','d0' => 'd 0','d1' => 'd 1','d2' => 'd 2','d3' => 'd 3','d4' => 'd 4',
                    'd5' => 'd 5','d6' => 'd 6','d7' => 'd 7','d8' => 'd 8','d9' => 'd 9','e0' => 'e 0','e1' => 'e 1',
                    'e2' => 'e 2','e3' => 'e 3','e4' => 'e 4','e5' => 'e 5','e6' => 'e 6','e7' => 'e 7','e8' => 'e 8',
                    'e9' => 'e 9','f0' => 'f 0','f1' => 'f 1','f2' => 'f 2','f3' => 'f 3','f4' => 'f 4','f5' => 'f 5',
                    'f6' => 'f 6','f7' => 'f 7','f8' => 'f 8','f9' => 'f 9','g0' => 'g 0','g1' => 'g 1','g2' => 'g 2',
                    'g3' => 'g 3','g4' => 'g 4','g5' => 'g 5','g6' => 'g 6','g7' => 'g 7','g8' => 'g 8','g9' => 'g 9',
                    'h0' => 'h 0','h1' => 'h 1','h2' => 'h 2','h3' => 'h 3','h4' => 'h 4','h5' => 'h 5','h6' => 'h 6',
                    'h7' => 'h 7','h8' => 'h 8','h9' => 'h 9','i0' => 'i 0','i1' => 'i 1','i2' => 'i 2','i3' => 'i 3',
                    'i4' => 'i 4','i5' => 'i 5','i6' => 'i 6','i7' => 'i 7','i8' => 'i 8','i9' => 'i 9','j0' => 'j 0',
                    'j1' => 'j 1','j2' => 'j 2','j3' => 'j 3','j4' => 'j 4','j5' => 'j 5','j6' => 'j 6','j7' => 'j 7',
                    'j8' => 'j 8','j9' => 'j 9',
                ],
            ],
        ];
    }

    /**
     * @dataProvider hashMaps
     */
    public function testEncodeHashMaps($expected, $input)
    {
        $decoded = CBOR::encode($input);
        $this->assertEquals($expected, $decoded);
    }
}
